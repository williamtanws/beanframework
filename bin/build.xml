<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2013 Rimero Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project name="ant-wrapper"
         default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:findbugs="antlib:edu.umd.cs.findbugs"
         xmlns:cobertura="antlib:net.sourceforge.cobertura.ant"
         xmlns:wrapper="antlib:com.rimerosolutions.ant.wrapper.tasks"
         xmlns:git="antlib:com.rimerosolutions.ant.git">

        <description>Apache Ant Command Line Wrapper</description>
        <!-- reuse the user's gradle properties if any for sensitive info such as gpg, credentials -->
        <property file="${user.home}/.gradle/gradle.properties"/>
        <property file="${basedir}/properties/build.properties"/>

        <!-- project properties -->
        <property name="release.properties.filename" value="${basedir}/properties/release.properties"/>
        <property file="${release.properties.filename}"/>
        <property name="build.number" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>

        <condition property="project.version.classifier" value="-SNAPSHOT">
                <equals casesensitive="true" arg1="${snapshot}" arg2="true"/>
        </condition>

        <property name="project.version.classifier" value=""/>
        <property name="project.version" value="${build.number}${project.version.classifier}"/>

        <!-- folders -->
        <property name="src.dir" value="src/main/java"/>
        <property name="test.src.dir" value="src/test/java"/>
        <property name="resources.dir" value="src/main/resources"/>
        <property name="test.resources.dir" value="src/test/resources"/>
        <property name="target.dir" value="target"/>
        <property name="test.data.dir" value="${target.dir}/testData"/>
        <property name="dist.dir" value="dist"/>
        <property name="apidocs.dir" value="${target.dir}/apidocs"/>
        <property name="cobertura.data.filename" value="cobertura.ser"/>
        <property name="cobertura.data.file" value="${test.data.dir}/${cobertura.data.filename}"/>
        <property name="lib.dir" value="lib"/>

        <!-- reports -->
        <property name="reports.dir" value="${target.dir}/reports"/>
        <property name="reports.junit.dir" value="${reports.dir}/junit"/>
        <property name="reports.junit.xml.dir" value="${reports.junit.dir}/xml"/>
        <property name="reports.junit.html.dir" value="${reports.junit.dir}/html"/>
        <property name="reports.findbugs.dir" value="${reports.dir}/findbugs"/>
        <property name="reports.cobertura.dir" value="${reports.dir}/cobertura"/>

        <!-- classes -->
        <property name="classes.dir" value="${target.dir}/classes"/>
        <property name="test.classes.dir" value="${target.dir}/testClasses"/>
        <property name="instrumentation.dir" value="${target.dir}/instrumentedClasses"/>

        <!-- javac properties -->
        <property name="javac.source" value="1.6"/>
        <property name="javac.target" value="1.6"/>
        <property name="javac.debug" value="true"/>
        <property name="javac.debuglevel" value="lines,vars,source"/>
        <property name="javac.encoding" value="utf-8"/>

        <!-- wrapper file name properties -->
        <property name="unix.wrapper.file" value="antw"/>
        <property name="windows.wrapper.file" value="antw.bat"/>
        <property name="windows.wrapper.cmd" value="antw.cmd"/>
        <property name="windows.wrapper.helper" value="lcp.bat"/>
        <property name="wrapper.dir" value="ant"/>

        <!-- bountycastle properties, ivy signing with pgp -->
        <property name="bountycastle.version" value="1.45"/>
        <property name="bountycastle.classifier" value="jdk16"/>
        <property name="bcpg.jar.file" value="bcpg-${bountycastle.classifier}-${bountycastle.version}.jar"/>
        <property name="bcprov.jar.file" value="bcprov-${bountycastle.classifier}-${bountycastle.version}.jar"/>

        <!-- ivy properties -->
        <property name="ivy.install.version" value="2.3.0"/>
        <condition property="ivy.home" value="${env.IVY_HOME}">
                <isset property="env.IVY_HOME"/>
        </condition>
        <property name="ivyxml.file" value="${basedir}/ivy.xml"/>
        <property name="ivy.home" value="${user.home}/.ant"/>
        <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
        <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
        <property name="ivy.lib.dir" value="${lib.dir}"/>

        <!-- maven repositories, resolvers in ivysettings.xml -->
        <property name="maven.repo.local" value="local-m2"/>
        <property name="maven.repo.sonatype.releases" value="sonatype-releases"/>
        <property name="maven.repo.sonatype.snapshots" value="sonatype-snapshots"/>

        <property name="company.name" value="Rimero Solutions Inc."/>
        <property name="product.description" value="Apache Ant Command Line Wrapper"/>
        <property name="template.pom.location" value="templates/pom.xml"/>

        <!-- release properties -->
        <property name="release.properties.filename" value="properties/release.properties"/>
        <property file="${release.properties.filename}"/>
        <property name="build.number" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>

        <!-- sonatype deployment conditions -->
        <condition property="sonatype.deployment.enabled">
                <and>
                        <isset property="signing.keyId"/>
                        <isset property="signing.password"/>
                        <isset property="signing.name"/>
                        <isset property="signing.secretKeyRingFile"/>
                        <isset property="sonatype.username"/>
                        <isset property="sonatype.password"/>
                </and>
        </condition>

        <condition property="sonatype.deployment.snapshots.enabled">
                <and>
                        <isset property="sonatype.deployment.enabled"/>
                        <equals casesensitive="false" arg1="${snapshot}" arg2="true"/>
                </and>
        </condition>

        <condition property="sonatype.deployment.releases.enabled">
                <not>
                        <isset property="sonatype.deployment.snapshots.enabled"/>
                </not>
        </condition>

        <tstamp>
                <format property="build.current.time" pattern="yyyyMMdd_HHmmss"/>
        </tstamp>

        <echo>Ant Command Line Wrapper ${project.version}.</echo>

        <!-- ****************************************** -->
        <!-- ivy related targets -->
        <!-- ****************************************** -->
        <target name="-bootstrap-build" unless="offline">
                <echo>Fetching ivy.</echo>
                <mkdir dir="${ivy.jar.dir}"/>
                <!-- download Ivy from web site so that it can be used even without any special installation -->
                <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
                     dest="${ivy.jar.file}"
                     usetimestamp="true"/>

                <!-- bootstrap ivy gpg signing -->
                <get src="http://repo1.maven.org/maven2/org/bouncycastle/bcprov-${bountycastle.classifier}/${bountycastle.version}/${bcprov.jar.file}"
                     dest="${ivy.jar.dir}/${bcprov.jar.file}"
                     usetimestamp="true"/>

                <get src="http://repo1.maven.org/maven2/org/bouncycastle/bcpg-${bountycastle.classifier}/${bountycastle.version}/${bcpg.jar.file}"
                     dest="${ivy.jar.dir}/${bcpg.jar.file}"
                     usetimestamp="true"/>
        </target>

        <target name="-init-ivy" depends="-bootstrap-build">
                <echo>Initializing Apache Ivy.</echo>
                <!-- try to load ivy here from ivy home, in case the user has not already dropped
                     it into ant's lib dir (note that the latter copy will always take precedence).
                     We will not fail as long as local lib dir exists (it may be empty) and
                     ivy is in at least one of ant's lib dir or the local lib dir. -->
                <path id="ivy.lib.path">
                        <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
                </path>

                <taskdef resource="org/apache/ivy/ant/antlib.xml"
                         uri="antlib:org.apache.ivy.ant"
                         classpathref="ivy.lib.path"/>
        </target>

        <target name="-resolve" depends="-init-ivy">
                <echo>Fetching dependencies.</echo>
                <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]" sync="true" log="quiet"/>
                <ivy:cachepath pathid="compile.classpath" conf="compile"/>
                <ivy:cachepath pathid="test.classpath" conf="test"/>
                <ivy:cachepath pathid="release.classpath" conf="release"/>
                <ivy:cachepath pathid="findbugs.classpath" conf="findbugs"/>
                <ivy:cachepath pathid="cobertura.classpath" conf="cobertura"/>

                <taskdef uri="antlib:com.rimerosolutions.ant.git"
                         resource="com/rimerosolutions/ant/git/jgit-ant-lib.xml"
                         classpathref="release.classpath"/>
        </target>

        <!-- ****************************************** -->
        <!-- release related targets -->
        <!-- ****************************************** -->
        <condition property="snapshot-build">
                <and>
                        <isset property="snapshot"/>
                        <equals arg1="true" arg2="${snapshot}"/>
                </and>
        </condition>

        <target name="release-prepare-fix" description="Release a fix version">
                <propertyfile file="${release.properties.filename}">
                        <entry key="build.revision.number" type="int" operation="+" value="1" pattern="0"/>
                </propertyfile>
        </target>

        <target name="release-prepare-feature" description="Release a feature version">
                <propertyfile file="${release.properties.filename}">
                        <entry key="build.minor.number" type="int" operation="+" value="1" pattern="0"/>
                        <entry key="build.revision.number" type="int" value="0" pattern="0"/>
                </propertyfile>
        </target>

        <target name="release-prepare-major" description="Release a major version">
                <propertyfile file="${release.properties.filename}">
                        <entry key="build.major.number" type="int" operation="+" value="1" pattern="0"/>
                        <entry key="build.minor.number" type="int" value="0" pattern="0"/>
                        <entry key="build.revision.number" type="int" value="0" pattern="0"/>
                </propertyfile>
        </target>

        <target name="-git-settings" depends="-resolve">
                <git:settings refId="github.settings"
                              username="${github.username}"
                              password="${github.password}"
                              name="${github.name}"
                              email="${github.email}"/>
        </target>

        <target name="-pre-release" depends="-git-settings">
                <echo>Checking tree modifications before release.</echo>
                <git:git directory="${basedir}" verbose="true">
                        <git:uptodate modificationExistProperty="tree.modified" failonerror="false"/>
                </git:git>

                <condition property="tree.modified.but.not.snapshot">
                        <and>
                                <isset property="tree.modified"/>
                                <not><isset property="snapshot-build"/></not>
                        </and>
                </condition>
        </target>

        <target name="-commit-release" depends="-pre-release" if="tree.modified.but.not.snapshot">
                <echo>Committing before release SCM tagging.</echo>
                <git:git directory="${basedir}" verbose="true" settingsRef="github.settings">
                    <git:commit message="Preparing release ${build.number}"/>
                    <git:uptodate failOnError="true"/>
                    <git:push/>
                </git:git>
        </target>

        <target name="-tag-release" depends="-commit-release" unless="snapshot-build">
                <echo>Tagging release ${build.number}.</echo>
                <git:git directory="${basedir}" verbose="true" settingsRef="github.settings">
                    <git:tag name="${build.number}"/>
                    <git:push/>
                </git:git>
        </target>

        <target name="release-perform" depends="-tag-release" description="Perform a release"/>

        <!-- ****************************************** -->
        <!-- general build targets -->
        <!-- ****************************************** -->
        <target name="init" depends="-resolve" description="Create build folder layout">
                <echo>Setting up build layout.</echo>
                <mkdir dir="${target.dir}"/>
                <mkdir dir="${lib.dir}"/>
                <mkdir dir="${apidocs.dir}"/>
                <mkdir dir="${classes.dir}"/>
                <mkdir dir="${test.classes.dir}"/>
                <mkdir dir="${test.data.dir}"/>
                <mkdir dir="${instrumentation.dir}"/>
                <mkdir dir="${reports.dir}"/>
                <mkdir dir="${reports.junit.xml.dir}"/>
                <mkdir dir="${reports.junit.html.dir}"/>
                <mkdir dir="${reports.findbugs.dir}"/>
                <mkdir dir="${reports.cobertura.dir}"/>
                <mkdir dir="${dist.dir}"/>
        </target>

        <target name="clean" description="Cleanup build">
                <echo>Cleaning up build.</echo>
                <delete dir="${target.dir}" quiet="true"/>
                <delete dir="${lib.dir}" quiet="true"/>
                <delete dir="${target.dir}" quiet="true"/>
                <delete dir="${dist.dir}" quiet="true"/>
        </target>

        <target name="-compile" depends="init">
                <echo>Compiling sources.</echo>
                <javac source="${javac.source}"
                       target="${javac.target}"
                       debug="${javac.debug}"
                       debuglevel="${javac.debuglevel}"
                       encoding="${javac.encoding}"
                       destdir="${classes.dir}"
                       includeantruntime="false">
                        <src path="${src.dir}"/>
                        <classpath refid="compile.classpath"/>
                </javac>
        </target>

        <target name="-copy-resources" depends="-compile">
                <echo>Copying project resources.</echo>
                <copy todir="${classes.dir}">
                        <fileset dir="${resources.dir}"/>
                </copy>
        </target>

        <target name="compile" depends="-copy-resources" description="Compile sources and copy resources"/>

        <!-- ****************************************** -->
        <!-- testing -->
        <!-- ****************************************** -->
        <target name="compile-tests" depends="compile" description="Compile test sources">
                <echo>Compiling test sources.</echo>

                <javac source="${javac.source}"
                       target="${javac.target}"
                       debug="${javac.debug}"
                       debuglevel="${javac.debuglevel}"
                       encoding="${javac.encoding}"
                       destdir="${test.classes.dir}"
                       includeantruntime="false">
                        <src path="${test.src.dir}"/>
                        <classpath>
                                <path refid="test.classpath"/>
                                <path refid="compile.classpath"/>
                                <path location="${classes.dir}"/>
                        </classpath>
                </javac>

                <copy todir="${test.classes.dir}">
                        <fileset dir="${test.resources.dir}"/>
                </copy>
        </target>

        <target name="-instrument-tests" depends="compile-tests">
                <delete file="${cobertura.data.file}" failonerror="false"/>

                <taskdef name="junit"
                         classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
                         classpathref="test.classpath"/>

                <taskdef uri="antlib:net.sourceforge.cobertura.ant"
                         classpathref="cobertura.classpath"
                         resource="net/sourceforge/cobertura/ant/antlib.xml"/>

                <cobertura:instrument todir="${instrumentation.dir}" datafile="${cobertura.data.file}">
                        <includeClasses regex=".*"/>
                        <excludeClasses regex=".*\.Test.*"/>
                        <instrumentationClasspath>
                                <path refid="test.classpath"/>
                                <pathelement location="${test.classes.dir}"/>
                        </instrumentationClasspath>
                </cobertura:instrument>
        </target>

        <target name="test" depends="-instrument-tests" description="Run unit tests">
                <echo>Running junit tests.</echo>

                <junit fork="true"
                       dir="${basedir}"
                       printsummary="yes"
                       showoutput="true"
                       haltonfailure="false"
                       errorproperty="junit.failed"
                       includeantruntime="false">

                        <sysproperty key="net.sourceforge.cobertura.datafile"
                                     file="${cobertura.data.file}"/>

                        <classpath location="${classes.dir}"/>
                        <classpath location="${instrumentation.dir}"/>
                        <classpath refid="test.classpath"/>
                        <classpath refid="compile.classpath"/>
                        <classpath refid="cobertura.classpath"/>

                        <formatter type="xml"/>

                        <batchtest todir="${reports.junit.xml.dir}">
                                <fileset dir="${test.src.dir}">
                                        <include name="**/*Test*.java"/>
                                </fileset>
                        </batchtest>
                </junit>

                <condition property="test.passed">
                        <not><isset property="junit.failed"/></not>
                </condition>
        </target>

        <!-- ****************************************** -->
        <!-- code quality -->
        <!-- ****************************************** -->
        <target name="report-findbugs" depends="compile" description="Generate FindBugs report">
                <echo>Generating findbugs report.</echo>

                <taskdef name="findbugs"
                         classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
                         uri="antlib:edu.umd.cs.findbugs"
                         classpathref="findbugs.classpath"/>

                <findbugs:findbugs classpath="findbugs.classpath"
                                   classpathref="findbugs.classpath"
                                   workHard="true"
                                   jvmargs="-Xmx512m -Xms512m"
                                   output="html"
                                   outputFile="${reports.findbugs.dir}/index.html"
                                   stylesheet="default.xsl">
                        <auxAnalyzePath>
                                <fileset dir="${lib.dir}" includes="**/*annotation*.jar"/>
                        </auxAnalyzePath>
                        <auxClasspath refid="compile.classpath"/>
                        <sourcePath path="${src.dir}" />
                        <class location="${classes.dir}" />
                </findbugs:findbugs>
        </target>

        <target name="report-junit" depends="test" description="Generate JUnit report">
                <echo>Generating JUnit report.</echo>
                <junitreport todir="${reports.junit.dir}">
                        <fileset dir="${reports.junit.xml.dir}">
                                <include name="TEST-*.xml"/>
                        </fileset>
                        <report format="frames" todir="${reports.junit.html.dir}"/>
                </junitreport>
        </target>

        <target name="report-cobertura" depends="test" description="Generate Cobertura report">
                <echo>Generating Cobertura report.</echo>
                <cobertura:report format="html"
                                  destdir="${reports.cobertura.dir}"
                                  srcdir="${src.dir}"
                                  datafile="${cobertura.data.file}"/>
        </target>

        <target name="reports" depends="report-findbugs,report-junit,report-cobertura" description="Generate reports(JUnit, FindBugs, Cobertura)">
                <fail unless="test.passed">Some tests failed, please take a look at the reports.</fail>
        </target>

        <!-- ****************************************** -->
        <!-- build artifacts generation -->
        <!-- ****************************************** -->
        <target name="jar" depends="compile" description="Create main jar artefact">
                <echo>Building jar.</echo>
                <jar destfile="${dist.dir}/${ant.project.name}.jar">
                        <manifest>
                                <attribute name="Built-By" value="${user.name}"/>
                                <attribute name="Built-Date" value="${build.current.time}"/>
                                <attribute name="Implementation-Title" value="${ant.project.name}"/>
                                <attribute name="Implementation-Version" value="${project.version}"/>
                                <attribute name="Implementation-Vendor" value="${company.name}"/>
                        </manifest>
                        <fileset dir="${classes.dir}"/>
                </jar>
        </target>

        <target name="javadoc" depends="compile" description="Generate Javadoc">
                <echo>Generating Javadoc documentation.</echo>
                <javadoc packagenames="com.rimerosolutions.ant.wrapper.*"
                         sourcepath="${src.dir}"
                         defaultexcludes="yes"
                         destdir="${apidocs.dir}"
                         author="true"
                         version="true"
                         use="true"
                         windowtitle="${product.description}">
                        <classpath refid="compile.classpath"/>
                        <doctitle><![CDATA[<h1>Ant Command Line Wrapper API</h1>]]></doctitle>
                        <bottom><![CDATA[<i>Copyright &#169; 2013 Rimero Solutions Inc. All Rights Reserved.</i>]]></bottom>
                        <link href="http://download.oracle.com/javase/6/docs/api/"/>
                        <link href="http://javadoc.haefelinger.it/org.apache.ant/1.7.1/"/>
                </javadoc>
        </target>

        <target name="jar-sources" depends="compile" description="Generate sources jar">
                <echo>Generating sources jar.</echo>
                <zip destfile="${dist.dir}/${ant.project.name}-sources.jar">
                        <zipfileset dir="${src.dir}"/>
                        <zipfileset dir="${resources.dir}"/>
                </zip>
        </target>

        <target name="jar-javadoc" depends="javadoc" description="Generate Javadoc jar">
                <echo>Generating sources jar.</echo>
                <zip destfile="${dist.dir}/${ant.project.name}-javadoc.jar">
                        <zipfileset dir="${apidocs.dir}"/>
                </zip>
        </target>

        <target name="build"
                depends="jar,jar-javadoc,jar-sources,reports"
                description="Create the jar and generate build reports"/>

        <!-- ****************************************** -->
        <!-- maven publishing -->
        <!-- ****************************************** -->
        <macrodef name="maven-publish" description="Maven publishing macro">
                <attribute name="mavenRepoId"/>
                <sequential>
                        <echo>Publishing build artifacts to your Maven repository with id @{mavenRepoId}.</echo>
                        <ivy:publish resolver="@{mavenRepoId}"
                                     pubrevision="${project.version}"
                                     overwrite="true"
                                     forcedeliver="true"
                                     publishivy="true">
                                <artifacts pattern="${dist.dir}/[artifact](-[classifier]).[ext]"/>
                        </ivy:publish>
                </sequential>
        </macrodef>

        <target name="maven-pom"
                depends="build"
                description="Generate the Maven POM for artifacts publishing">
                <echo>Generating Maven POM.</echo>
                <ivy:makepom ivyfile="${ivyxml.file}"
                             description="${product.description}"
                             templatefile="${template.pom.location}"
                             pomfile="${dist.dir}/${ant.project.name}.pom">
                        <mapping conf="compile" scope="compile"/>
                        <mapping conf="test" scope="test"/>
                </ivy:makepom>
        </target>

        <target name="maven-publish-local"
                depends="maven-pom,release-perform"
                description="Publish build artifacts to the local Maven repository">
                <maven-publish mavenRepoId="${maven.repo.local}"/>
        </target>

        <target name="-maven-publish-sonatype-release"
                depends="maven-pom,release-perform"
                if="sonatype.deployment.releases.enabled">
                <maven-publish mavenRepoId="${maven.repo.sonatype.releases}"/>
        </target>

        <target name="-maven-publish-sonatype-snapshots"
                depends="maven-pom"
                if="sonatype.deployment.snapshots.enabled">
                <maven-publish mavenRepoId="${maven.repo.sonatype.snapshots}"/>
        </target>

        <target name="maven-publish-remote"
                depends="-maven-publish-sonatype-release,-maven-publish-sonatype-snapshots"
                description="Publish build artifacts to the Sonatype Snapshots repository"/>

        <!-- ****************************************** -->
        <!-- wrapper generation -->
        <!-- ****************************************** -->
        <target name="wrapper" depends="jar" description="Generate Ant wrapper">
                <echo>Generating Ant wrapper.</echo>
                <taskdef uri="antlib:com.rimerosolutions.ant.wrapper.tasks"
                         resource="com/rimerosolutions/ant/wrapper/tasks/antlib.xml"
                         classpath="${dist.dir}/${ant.project.name}.jar"/>
                <wrapper:wrapper/>
        </target>

        <target name="wrapper-clean" description="Cleanup Ant wrapper related files">
                <delete dir="${wrapper.dir}" quiet="true"/>
                <delete file="${unix.wrapper.file}" quiet="true"/>
                <delete file="${windows.wrapper.file}"  quiet="true"/>
                <delete file="${windows.wrapper.cmd}"  quiet="true"/>
                <delete file="${windows.wrapper.helper}" quiet="true"/>
        </target>

</project>
